{"componentChunkName":"component---src-templates-blog-template-js","path":"/terraform/index_02/","result":{"data":{"cur":{"id":"331acba5-223f-542e-900d-3395aa6b8d0a","html":"<h2 id=\"terraform-동작하는-과정\" style=\"position:relative;\"><a href=\"#terraform-%EB%8F%99%EC%9E%91%ED%95%98%EB%8A%94-%EA%B3%BC%EC%A0%95\" aria-label=\"terraform 동작하는 과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Terraform 동작하는 과정</h2>\n<p>Terraform은 사용자가 작성한 코드를 각 CSP(Cloud Solution Provide)들의 API가 읽을 수 있도록 변환하고 코드에 이상이 없는지 계획를 실행하고 실제 사용자 계정에 인프라를 적용을 한다.</p>\n<blockquote>\n<p>여기서 중요한 점은 API에 접근 할 수 있는지가 중요하다.</p>\n</blockquote>\n<p>간혹 Terraform개발 서버(?)를 Cloud Private 환경에 구성했을 경우 Init과정이 되지 않는다. (Plan과 Apply는 된다)</p>\n<hr>\n<h3 id=\"--flow\" style=\"position:relative;\"><a href=\"#--flow\" aria-label=\"  flow permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- Flow</h3>\n<p><a href=\"https://velog.velcdn.com/images/jtret2424/post/314311aa-526e-4dfb-84c4-aaeafe92f6de/image.png\"></a></p>\n<p><a href=\"https://velog.velcdn.com/images/jtret2424/post/80d5d6c3-378d-481f-ace7-494c5177a19a/image.png\"></a></p>\n<p><img src=\"https://velog.velcdn.com/images/jtret2424/post/8b55ef91-c33e-482a-ac90-269d7fbd1718/image.png\" alt=\"\"></p>\n<p>코드를 작성**(Write)<strong>하고 terraform이 디렉토리를 보고 초기화</strong>(Init)<strong>하고 계획을 실행</strong>(Plan)<strong>하고 인프라 적용</strong>(Apply)**한다.</p>\n<hr>\n<h3 id=\"1-1-write작성\" style=\"position:relative;\"><a href=\"#1-1-write%EC%9E%91%EC%84%B1\" aria-label=\"1 1 write작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1-1. Write(작성)</h3>\n<p>실제 프로비저닝 하기 위해서는 코드 작성이 필요하고 Terraform의 특징으로는 Yaml과 같이 <code class=\"language-text\">Key</code>와 <code class=\"language-text\">Value</code> 형태라서 작성하기 편하다.</p>\n<p>아래 코드만 봐도 <code class=\"language-text\">Key</code>와 <code class=\"language-text\">Value</code> 형태로 이루어져 있어서 한눈에 알아볼수 있다.</p>\n<p><del>(사실 module, variable, locals 등 알게 될텐데 코드랑 친하지 않은 사람들이라면 “엥?ㅇㅅㅇ” 할 수도 있다… 나는 module에서 힘들었다..)</del></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#VPC 생성 예제\n\nprovider \"aws\" {\n  region = \"ap-northeast-2\"\n}\n\nresource \"aws_vpc\" \"vpc\" {\n    cidr_block = \"10.150.0.0/16\"\n    \n    tags = {\n        Name = \"my-test-vpc\"\n    }\n}</code></pre></div>\n<blockquote>\n<p>Terraform은 작성한 코드를 실행할때에 만들어지는 리소스의 순서가 작성한 순서가 아닌 별도의 방식이 있다.</p>\n<p>예로 Securtiy groups이 먼저 만들어지고 EC2생성 된다.</p>\n</blockquote>\n<p>이렇게 우리가 코드를 작성할때 고려하지 않아도 Terraform은 친절하게 알아서 순서대로 생성이 된다.</p>\n<hr>\n<h3 id=\"1-2-init초기화\" style=\"position:relative;\"><a href=\"#1-2-init%EC%B4%88%EA%B8%B0%ED%99%94\" aria-label=\"1 2 init초기화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1-2. Init(초기화)</h3>\n<p>Terraform에서는 <code class=\"language-text\">inti</code> 를 초기화 과정이라고 한다.</p>\n<p>우리는 write 과정에서 코드를 작성하고 <code class=\"language-text\">terraform init</code> 명령을 통해 초기화를 해야한다.</p>\n<p>여기서 초기화란, Terraform 구성 파일이 작업된 디렉토리 다시 읽는 과정이고\n디렉토리에 있는 <code class=\"language-text\">.tf</code> 파일을 로드하고 <code class=\"language-text\">provider</code>와 <code class=\"language-text\">module</code>을 식별하고 다운로드 진행한다.</p>\n<p>필수로 <code class=\"language-text\">plugin 설치</code>, <code class=\"language-text\">Module 설치</code>, <code class=\"language-text\">Backend 초기화</code> 과정이 있다면 init 과정이 필요하다.</p>\n<p><img src=\"https://velog.velcdn.com/images/jtret2424/post/130b9e5f-b706-446c-bb44-65d8a5366f79/image.gif\" alt=\"\">\n<code class=\"language-text\">init</code> 과정이 완료가 되면 코드가 작성된 디렉토리에 <code class=\"language-text\">.terraform.lock.hcl</code> 파일이 만들어 진다.</p>\n<hr>\n<h3 id=\"1-3-plan계획\" style=\"position:relative;\"><a href=\"#1-3-plan%EA%B3%84%ED%9A%8D\" aria-label=\"1 3 plan계획 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1-3. Plan(계획)</h3>\n<p><code class=\"language-text\">plan</code>은 작성한 코드를 적용할 인프라에 <code class=\"language-text\">계획 실행</code>하는 과정이며 실제로 어떤 리소스들이 <code class=\"language-text\">생성, 변경, 삭제</code>가 되는지 확인하는 절차다.</p>\n<p><img src=\"https://velog.velcdn.com/images/jtret2424/post/270b0ffb-8c9f-4654-98f3-ebe2d46a828d/image.png\" alt=\"\"></p>\n<p>이렇게 <code class=\"language-text\">terraform plan</code> 명령어를 통해 Plan의 정보를 확인 할 수 있고\n1개의 리소스가 생성이 되고, 0개가 변경이 되고, 0개가 삭제된다 라는 것을 확인 할 수 있습니다.\n(<code class=\"language-text\">Plan : 1 to add, 0 to change, 0 to destroy</code>)</p>\n<p><img src=\"https://velog.velcdn.com/images/jtret2424/post/0e93249b-9092-4179-929b-4806602863cd/image.png\" alt=\"\"></p>\n<p>사실 <code class=\"language-text\">plan</code>를 하지 않고 바로 <code class=\"language-text\">apply</code>를 진행할 수 있습니다만.. 위 처럼 사람은 실수를 하기에 <code class=\"language-text\">plan</code>은 중요합니다.</p>\n<p>그리고 terraform에서는 어디가 잘못되었는지 확실히 알려주기 때문에 에러로 고생할 일이 적습니다.\n<del>(적다고 했지 없다고 하진 않았따…)</del></p>\n<hr>\n<h3 id=\"1-4-apply적용\" style=\"position:relative;\"><a href=\"#1-4-apply%EC%A0%81%EC%9A%A9\" aria-label=\"1 4 apply적용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1-4. Apply(적용)</h3>\n<p><code class=\"language-text\">apply</code>는 코드를 실제 인프라에 적용하기 위해 사용합니다.</p>\n<p>우리는 이전에 <code class=\"language-text\">plan</code>를 통해 계획을 실행하였으며 실행 과정 중 코드가 있는 디렉토리에 <code class=\"language-text\">terraform</code> 디렉토리가 생성되었습니다.</p>\n<p><img src=\"https://velog.velcdn.com/images/jtret2424/post/42be98d7-b30c-4f23-bed8-5c650b1004e9/image.png\" alt=\"\"></p>\n<p>저장된 <code class=\"language-text\">terraform</code> 디렉토리안에는 CSP API와 통신 가능하도록 만들어진 디렉토리가 있으며 구성된 파일을 가지고 적용하게됩니다.</p>\n<p><img src=\"https://velog.velcdn.com/images/jtret2424/post/9d8f6ca4-715f-4e96-a35a-ef0c92e6b70c/image.png\" alt=\"\"></p>\n<p><code class=\"language-text\">terraform apply</code> 명령어로 적용 시 <code class=\"language-text\">Enter a value : </code>   문구가 발생하며 확인 단계가 필요합니다.\n다시 한번 적용 할껀지 물어봅니다.  <code class=\"language-text\">yes</code>를 입력하게 되면 생성되는 리소스의 <code class=\"language-text\">ID</code> 가 출력되면서 <code class=\"language-text\">Apply complete! Resources: 1 added, 0 changed, 0 destroyed.</code> 적용 완료되었고 몇개의 리소스가 생성, 변경, 삭제 되었는지를 알 수 있습니다.</p>\n<p>이렇게 <code class=\"language-text\">apply</code>를 하게되면 코드가 있던 디렉토리에는 <code class=\"language-text\">terraform.tfstate</code>, <code class=\"language-text\">terraform.tfstate.backup</code> 파일이 생성되었습니다.</p>\n<p><code class=\"language-text\">terrafrom.tfstate</code>파일은 <code class=\"language-text\">apply</code> 직후의 인프라 상태를 저장해둔 파일이며 <code class=\"language-text\">terrafrom.tfstate.backup</code>파일은 <code class=\"language-text\">apply</code> 이전의 상태를 저장해둔 파일입니다.</p>\n<hr>\n<h3 id=\"1-5-destroy\" style=\"position:relative;\"><a href=\"#1-5-destroy\" aria-label=\"1 5 destroy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1-5. Destroy</h3>\n<p><code class=\"language-text\">destroy</code>는 우리가 코드로 생성한 인프라를 삭제~~(뿌셔뿌셔!)~~하기 위해 사용합니다.</p>\n<p><img src=\"https://velog.velcdn.com/images/jtret2424/post/7f4e1f21-5317-4f43-9569-6215e4616a61/image.png\" alt=\"\"></p>\n<p><code class=\"language-text\">terraform destroy</code>를 통해 삭제 할 수 있으며 <code class=\"language-text\">plan</code>과 <code class=\"language-text\">apply</code>처럼 어떤 리소스가 삭제되는지,\n정말로 삭제 할 것인지(?) 물어보게 됩니다.</p>\n<hr>\n<h3 id=\"--end\" style=\"position:relative;\"><a href=\"#--end\" aria-label=\"  end permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- End..</h3>\n<p>이렇게 우리는 코드 작성 단계부터 삭제 단계까지의 Flow를 알아봤다..</p>\n<p>앞으로 코드를 작성하면서 Terraform document을 많이 보게 될텐데 자세히 보면 엄청난 팁이 숨겨져 있다!</p>\n<p>그럼.. 테라폼 고수가 되는 날까지.. <del>아디오스..</del></p>\n<p><img src=\"https://velog.velcdn.com/images/jtret2424/post/c3713d77-cdf8-4542-8a34-1d418dd48990/image.gif\" alt=\"\"></p>\n<p>Terraform languge document : <a href=\"https://www.terraform.io/language\">https://www.terraform.io/language</a></p>\n<hr>\n<p>**자문과 많은 도움을 주신 vincent님께 감사드립니다. ( _ _ )\n**</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#terraform-%EB%8F%99%EC%9E%91%ED%95%98%EB%8A%94-%EA%B3%BC%EC%A0%95\">Terraform 동작하는 과정</a></p>\n<ul>\n<li><a href=\"#--flow\">- Flow</a></li>\n<li><a href=\"#1-1-write%EC%9E%91%EC%84%B1\">1-1. Write(작성)</a></li>\n<li><a href=\"#1-2-init%EC%B4%88%EA%B8%B0%ED%99%94\">1-2. Init(초기화)</a></li>\n<li><a href=\"#1-3-plan%EA%B3%84%ED%9A%8D\">1-3. Plan(계획)</a></li>\n<li><a href=\"#1-4-apply%EC%A0%81%EC%9A%A9\">1-4. Apply(적용)</a></li>\n<li><a href=\"#1-5-destroy\">1-5. Destroy</a></li>\n<li><a href=\"#--end\">- End..</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"Terraform 동작하는 과정 Terraform은 사용자가 작성한 코드를 각 CSP(Cloud Solution Provide)들의 API가 읽을 수 있도록 변환하고 코드에 이상이 없는지 계획를 실행하고 실제 사용자 계정에 인프라를 적용을 한다. 여기서 중요한 점은 API에 접근 할 수 있는지가 중요하다. 간혹 Terraform개발 서버(?)를 Cloud Private 환경에 구성했을 경우 Init과정이 되지 않는다. (Plan과 Apply는 된다) - Flow    코드를 작성**(Write)하고 terraform이 디렉토리를 보고 초기화(Init)하고 계획을 실행(Plan)하고 인프라 적용(Apply)**한다. 1-1. Write(작성) 실제 프로비저닝 하기 위해서는 코드 작성이 필요하고 Terraform의 특징으로는 Yaml과 같이 와  형태라서 작성하기 편하다. 아래 코드만 봐도 와  형태로 이루어져 있어서 한눈에 알아볼수 있다. (사실 module, variable, lo…","frontmatter":{"date":"August 25, 2023","title":"01. Terraform - 동작 과정","categories":"terraform","author":"정욱현","emoji":"😀"},"fields":{"slug":"/terraform/index_02/"}},"next":{"id":"4911b009-1a56-50d1-b1c0-2f170d3ecc3b","html":"<h3 id=\"terraform\" style=\"position:relative;\"><a href=\"#terraform\" aria-label=\"terraform permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Terraform</h3>\n<p>앞으로 우리가 Terraform으로 만들 인프라 아키텍처를 참고해서 코드로 구현하는 걸 목표!!!\n<img src=\"https://velog.velcdn.com/images/jtret2424/post/e43d3f89-3358-4bfd-a28e-56407ee99ae0/image.png\" alt=\"\"></p>\n<p>또 한, Terraform AWS Resource Document를 활용하여 resource에 포함된 옵션들을 살펴보자!\n<del>(앞으로 이 Document랑 친해져야합니다..)</del></p>\n<blockquote>\n<p><a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources\">https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources</a></p>\n</blockquote>\n<p><img src=\"https://velog.velcdn.com/images/jtret2424/post/d93e65f3-4de0-4f06-97b8-a8cb6102db4d/image.png\" alt=\"\"></p>\n<hr>\n<h3 id=\"3-0-디렉토리-생성\" style=\"position:relative;\"><a href=\"#3-0-%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC-%EC%83%9D%EC%84%B1\" aria-label=\"3 0 디렉토리 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3-0. 디렉토리 생성</h3>\n<p><code class=\"language-text\">environment</code> 디렉토리 밑에 <code class=\"language-text\">terraform</code> 디렉토리를 만들 후 <code class=\"language-text\">network.tf</code> 파일을 만듭니다!</p>\n<p><img src=\"https://velog.velcdn.com/images/jtret2424/post/7ad967b1-04af-4dca-9d67-4ed05f9dab87/image.png\" alt=\"\"></p>\n<h3 id=\"3-1-providertf-설정\" style=\"position:relative;\"><a href=\"#3-1-providertf-%EC%84%A4%EC%A0%95\" aria-label=\"3 1 providertf 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3-1. Provider.tf 설정</h3>\n<p>리소스를 생성하기 위해서는 IAM Key가 필요하다.\nTerraform에서는 Key를 <code class=\"language-text\">provider.tf</code> 파일에 <code class=\"language-text\">하드코딩</code>하는 방법도 있다.</p>\n<p>위에서 만든 <code class=\"language-text\">terraform</code> 디렉토리 아래 <code class=\"language-text\">provider.tf</code> 파일을 만들어서 Key를 넣어주자</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">provider \"aws\" {\n    access_key  = \"[ACCESS KEY]\"\n    secret_key  = \"[SECRET_KEY]\"\n    region      = \"[REGION]\"\n}</code></pre></div>\n<h3 id=\"3-2-vpc-생성\" style=\"position:relative;\"><a href=\"#3-2-vpc-%EC%83%9D%EC%84%B1\" aria-label=\"3 2 vpc 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3-2. VPC 생성</h3>\n<p>VPC에 생성에 필요한 소스는 아래 Terraform  document 에서 볼 수 있다.</p>\n<blockquote>\n<p><a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/vpc\">https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/vpc</a></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">resource \"aws_vpc\" \"vpc\" {\n    cidr_block = \"192.168.0.0/24\"\n    enable_dns_hostnames = true\n    tags = {\n        Name = \"vpc-terraform\"\n    }\n}</code></pre></div>\n<p><code class=\"language-text\">terraform init</code> 후 <code class=\"language-text\">plan</code>을 실행해보고 내가 만들고 싶은 VPC가 정상적으로 동작하는지 확인해보자!\n문제가 없다면 <code class=\"language-text\">terraform apply</code>를 통해 적용해보자!</p>\n<p><img src=\"https://velog.velcdn.com/images/jtret2424/post/b619a6ef-9f3e-4b1c-a51f-ef851497f77c/image.png\" alt=\"\"></p>\n<p>VPC가 생성된 것을 볼수가 있다!\n이제 Subnet를 생성해보자</p>\n<h3 id=\"3-3-subnet-생성\" style=\"position:relative;\"><a href=\"#3-3-subnet-%EC%83%9D%EC%84%B1\" aria-label=\"3 3 subnet 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3-3. Subnet 생성</h3>\n<p>Subnet은 <code class=\"language-text\">VPC Resource</code>를 만든 <code class=\"language-text\">network.tf</code>안에 아래와 같이 작성해보자</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">### VPC ###\nresource \"aws_vpc\" \"vpc\" {\n    cidr_block = \"192.168.0.0/24\"\n    enable_dns_hostnames = true\n    tags = {\n        Name = \"vpc-terraform\"\n    }\n}\n\n### Subnet ###\nresource \"aws_subnet\" \"dmz_subnet_2a\" {\n\tvpc_id = aws_vpc.vpc.id\n\tcidr_block = \"192.168.0.0/27\"\n\tavailability_zone = \"ap-northeast-2a\"\n\ttags = {\n\t\tName = \"sub-terraform-dmz-2a\"\n\t}\n}\n\nresource \"aws_subnet\" \"dmz_subnet_2c\" {\n\tvpc_id = aws_vpc.vpc.id\n\tcidr_block = \"192.168.0.32/27\"\n\tavailability_zone = \"ap-northeast-2c\"\n\ttags = {\n\t\tName = \"sub-terraform-dmz-2c\"\n\t}\n}\n\nresource \"aws_subnet\" \"app_subnet_2a\" {\n\tvpc_id = aws_vpc.vpc.id\n\tcidr_block = \"192.168.0.64/26\"\n\tavailability_zone = \"ap-northeast-2a\"\n\ttags = {\n\t\tName = \"sub-terraform-app-2a\"\n\t}\n}\n\nresource \"aws_subnet\" \"app_subnet_2c\" {\n\tvpc_id = aws_vpc.vpc.id\n\tcidr_block = \"192.168.0.128/26\"\n\tavailability_zone = \"ap-northeast-2c\"\n\ttags = {\n\t\tName = \"sub-terraform-app-2c\"\n\t}\n}\n\nresource \"aws_subnet\" \"db_subnet_2a\" {\n\tvpc_id = aws_vpc.vpc.id\n\tcidr_block = \"192.168.0.192/27\"\n\tavailability_zone = \"ap-northeast-2a\"\n\ttags = {\n\t\tName = \"sub-terraform-db-2a\"\n\t}\n}\n\nresource \"aws_subnet\" \"db_subnet_2c\" {\n\tvpc_id = aws_vpc.vpc.id\n\tcidr_block = \"192.168.0.224/27\"\n\tavailability_zone = \"ap-northeast-2c\"\n\ttags = {\n\t\tName = \"sub-terraform-app-2c\"\n\t}\n}</code></pre></div>\n<p>여기서 <code class=\"language-text\">aws_subnet</code> 를 생성할땐 <code class=\"language-text\">vpc_id</code>값이 필요한데, VPC를 생성하고 AWS Web Console 화면에서 나온 VPC ID를 하드코딩 할 수 있지만, 매번 만들때마다 Code 수정이 필요한 작업이 필요하다,</p>\n<p><code class=\"language-text\">Terraform.tfstate</code>에 보면 VPC ID가 저장되는데  <code class=\"language-text\">aws_vpc.vpc.id</code>로 VPC ID를 가져 올 수 있다.</p>\n<p>자, 이제 apply를 하면 Subnet 생성된걸 확인 할 수 있다.</p>\n<p><img src=\"https://velog.velcdn.com/images/jtret2424/post/aba9df49-fd88-4956-8e1c-28a4745c22de/image.png\" alt=\"\"></p>\n<hr>\n<p>간단하게 VPC와 Subnet를 만드는걸 해봤지만, 이 글을 읽는 사람이라면\nVPC와 Subnet으로 끝나는 것이 아닌 AWS VPC Network 기본인 항목들을 만들어서 배포해봐야한다. <code class=\"language-text\">IGW</code>, <code class=\"language-text\">NAT</code>, <code class=\"language-text\">RouteTable</code>, <code class=\"language-text\">NACL</code> 등 관리해야하는 리소스들이 있으니 한번 만들어 봤으면 좋겠다!!</p>\n<p>다음 편은 위에 만든 Code를 Module화 하는 것이다!</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#terraform\">Terraform</a></li>\n<li><a href=\"#3-0-%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC-%EC%83%9D%EC%84%B1\">3-0. 디렉토리 생성</a></li>\n<li><a href=\"#3-1-providertf-%EC%84%A4%EC%A0%95\">3-1. Provider.tf 설정</a></li>\n<li><a href=\"#3-2-vpc-%EC%83%9D%EC%84%B1\">3-2. VPC 생성</a></li>\n<li><a href=\"#3-3-subnet-%EC%83%9D%EC%84%B1\">3-3. Subnet 생성</a></li>\n</ul>\n</div>","frontmatter":{"date":"August 25, 2023","title":"03. Terraform - AWS VPC, Subnet 생성","categories":"terraform","author":"정욱현","emoji":"😀"},"fields":{"slug":"/terraform/index_04/"}},"prev":{"id":"8f4758d9-4c8f-527c-9cde-c174e5968e67","html":"<h2 id=\"1-제목일꺼같아요\" style=\"position:relative;\"><a href=\"#1-%EC%A0%9C%EB%AA%A9%EC%9D%BC%EA%BA%BC%EA%B0%99%EC%95%84%EC%9A%94\" aria-label=\"1 제목일꺼같아요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 제목일꺼같아요</h2>\n<p>본문을 여기다가 쓰나봐요</p>\n<blockquote>\n<p>이건뭘까요?</p>\n</blockquote>\n<p>이건 아무래도 <code class=\"language-text\">코드</code> 를 뜻하나봐요</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> python</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\n\na <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\nb <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\nc <span class=\"token operator\">=</span> a<span class=\"token operator\">+</span>b\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span></code></pre></div>\n<p>123</p>\n<h1 id=\"이에요\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EC%97%90%EC%9A%94\" aria-label=\"이에요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>#이에요</h1>\n<h2 id=\"이에요-1\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EC%97%90%EC%9A%94-1\" aria-label=\"이에요 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>##이에요</h2>\n<h3 id=\"이에요-2\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EC%97%90%EC%9A%94-2\" aria-label=\"이에요 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>###이에요</h3>\n<h4 id=\"이에요-3\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EC%97%90%EC%9A%94-3\" aria-label=\"이에요 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>####이에요</h4>\n<h5 id=\"도-있을까요\" style=\"position:relative;\"><a href=\"#%EB%8F%84-%EC%9E%88%EC%9D%84%EA%B9%8C%EC%9A%94\" aria-label=\"도 있을까요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>#####도 있을까요?</h5>\n<h2 id=\"2-제목이겠죠\" style=\"position:relative;\"><a href=\"#2-%EC%A0%9C%EB%AA%A9%EC%9D%B4%EA%B2%A0%EC%A3%A0\" aria-label=\"2 제목이겠죠 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 제목이겠죠?</h2>\n<p>사진은 어떻게 추가하면될까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">![사진](test_chrome.PNG)</code></pre></div>\n<p><img src=\"/6b7a2d743cab937c83d9adf3d6c4e242/test_chrome.png\" alt=\"사진\"></p>\n<p><img src=\"rein_01.HEIC\" alt=\"rein_01.HEIC\"></p>\n<p><img src=\"rein_02.heic\" alt=\"rein_02.heic\"></p>\n<p>사진의 이름은 대소문자를 가려요 제대로 써야해요.<br>\n잘쓰자</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#1-%EC%A0%9C%EB%AA%A9%EC%9D%BC%EA%BA%BC%EA%B0%99%EC%95%84%EC%9A%94\">1. 제목일꺼같아요</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%9D%B4%EC%97%90%EC%9A%94\">##이에요</a></p>\n<ul>\n<li>\n<p><a href=\"#%EC%9D%B4%EC%97%90%EC%9A%94-1\">###이에요</a></p>\n<ul>\n<li>\n<p><a href=\"#%EC%9D%B4%EC%97%90%EC%9A%94-2\">####이에요</a></p>\n<ul>\n<li><a href=\"#%EB%8F%84-%EC%9E%88%EC%9D%84%EA%B9%8C%EC%9A%94\">#####도 있을까요?</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#2-%EC%A0%9C%EB%AA%A9%EC%9D%B4%EA%B2%A0%EC%A3%A0\">2. 제목이겠죠?</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"August 25, 2023","title":"테스트 이모지입니다.","categories":"테스트","author":"정욱현","emoji":"😀"},"fields":{"slug":"/test/"}},"site":{"siteMetadata":{"siteUrl":"https://loafer-wock.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/terraform/index_02/","nextSlug":"/terraform/index_04/","prevSlug":"/test/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}