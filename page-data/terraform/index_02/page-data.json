{"componentChunkName":"component---src-templates-blog-template-js","path":"/terraform/index_02/","result":{"data":{"cur":{"id":"331acba5-223f-542e-900d-3395aa6b8d0a","html":"<p><img src=\"https://velog.velcdn.com/images/jtret2424/post/35b7a40f-246c-46c0-8648-7397bfee914a/image.gif\" alt=\"\"></p>\n<h2 id=\"terraform-동작하는-과정\" style=\"position:relative;\"><a href=\"#terraform-%EB%8F%99%EC%9E%91%ED%95%98%EB%8A%94-%EA%B3%BC%EC%A0%95\" aria-label=\"terraform 동작하는 과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Terraform 동작하는 과정</h2>\n<p>Terraform은 사용자가 작성한 코드를 각 CSP(Cloud Solution Provide)들의 API가 읽을 수 있도록 변환하고 코드에 이상이 없는지 계획를 실행하고 실제 사용자 계정에 인프라를 적용을 한다.</p>\n<blockquote>\n<p>여기서 중요한 점은 API에 접근 할 수 있는지가 중요하다.</p>\n</blockquote>\n<p>간혹 Terraform개발 서버(?)를 Cloud Private 환경에 구성했을 경우 Init과정이 되지 않는다. (Plan과 Apply는 된다)</p>\n<hr>\n<h3 id=\"--flow\" style=\"position:relative;\"><a href=\"#--flow\" aria-label=\"  flow permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- Flow</h3>\n<p><a href=\"https://velog.velcdn.com/images/jtret2424/post/314311aa-526e-4dfb-84c4-aaeafe92f6de/image.png\"></a></p>\n<p><a href=\"https://velog.velcdn.com/images/jtret2424/post/80d5d6c3-378d-481f-ace7-494c5177a19a/image.png\"></a></p>\n<p><img src=\"https://velog.velcdn.com/images/jtret2424/post/8b55ef91-c33e-482a-ac90-269d7fbd1718/image.png\" alt=\"\"></p>\n<p>코드를 작성**(Write)<strong>하고 terraform이 디렉토리를 보고 초기화</strong>(Init)<strong>하고 계획을 실행</strong>(Plan)<strong>하고 인프라 적용</strong>(Apply)**한다.</p>\n<hr>\n<h3 id=\"1-1-write작성\" style=\"position:relative;\"><a href=\"#1-1-write%EC%9E%91%EC%84%B1\" aria-label=\"1 1 write작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1-1. Write(작성)</h3>\n<p>실제 프로비저닝 하기 위해서는 코드 작성이 필요하고 Terraform의 특징으로는 Yaml과 같이 <code class=\"language-text\">Key</code>와 <code class=\"language-text\">Value</code> 형태라서 작성하기 편하다.</p>\n<p>아래 코드만 봐도 <code class=\"language-text\">Key</code>와 <code class=\"language-text\">Value</code> 형태로 이루어져 있어서 한눈에 알아볼수 있다.</p>\n<p><del>(사실 module, variable, locals 등 알게 될텐데 코드랑 친하지 않은 사람들이라면 “엥?ㅇㅅㅇ” 할 수도 있다… 나는 module에서 힘들었다..)</del></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#VPC 생성 예제\n\nprovider \"aws\" {\n  region = \"ap-northeast-2\"\n}\n\nresource \"aws_vpc\" \"vpc\" {\n    cidr_block = \"10.150.0.0/16\"\n    \n    tags = {\n        Name = \"my-test-vpc\"\n    }\n}</code></pre></div>\n<blockquote>\n<p>Terraform은 작성한 코드를 실행할때에 만들어지는 리소스의 순서가 작성한 순서가 아닌 별도의 방식이 있다.</p>\n<p>예로 Securtiy groups이 먼저 만들어지고 EC2생성 된다.</p>\n</blockquote>\n<p>이렇게 우리가 코드를 작성할때 고려하지 않아도 Terraform은 친절하게 알아서 순서대로 생성이 된다.</p>\n<hr>\n<h3 id=\"1-2-init초기화\" style=\"position:relative;\"><a href=\"#1-2-init%EC%B4%88%EA%B8%B0%ED%99%94\" aria-label=\"1 2 init초기화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1-2. Init(초기화)</h3>\n<p>Terraform에서는 <code class=\"language-text\">inti</code> 를 초기화 과정이라고 한다.</p>\n<p>우리는 write 과정에서 코드를 작성하고 <code class=\"language-text\">terraform init</code> 명령을 통해 초기화를 해야한다.</p>\n<p>여기서 초기화란, Terraform 구성 파일이 작업된 디렉토리 다시 읽는 과정이고\n디렉토리에 있는 <code class=\"language-text\">.tf</code> 파일을 로드하고 <code class=\"language-text\">provider</code>와 <code class=\"language-text\">module</code>을 식별하고 다운로드 진행한다.</p>\n<p>필수로 <code class=\"language-text\">plugin 설치</code>, <code class=\"language-text\">Module 설치</code>, <code class=\"language-text\">Backend 초기화</code> 과정이 있다면 init 과정이 필요하다.</p>\n<p><img src=\"https://velog.velcdn.com/images/jtret2424/post/130b9e5f-b706-446c-bb44-65d8a5366f79/image.gif\" alt=\"\">\n<code class=\"language-text\">init</code> 과정이 완료가 되면 코드가 작성된 디렉토리에 <code class=\"language-text\">.terraform.lock.hcl</code> 파일이 만들어 진다.</p>\n<hr>\n<h3 id=\"1-3-plan계획\" style=\"position:relative;\"><a href=\"#1-3-plan%EA%B3%84%ED%9A%8D\" aria-label=\"1 3 plan계획 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1-3. Plan(계획)</h3>\n<p><code class=\"language-text\">plan</code>은 작성한 코드를 적용할 인프라에 <code class=\"language-text\">계획 실행</code>하는 과정이며 실제로 어떤 리소스들이 <code class=\"language-text\">생성, 변경, 삭제</code>가 되는지 확인하는 절차다.</p>\n<p><img src=\"https://velog.velcdn.com/images/jtret2424/post/270b0ffb-8c9f-4654-98f3-ebe2d46a828d/image.png\" alt=\"\"></p>\n<p>이렇게 <code class=\"language-text\">terraform plan</code> 명령어를 통해 Plan의 정보를 확인 할 수 있고\n1개의 리소스가 생성이 되고, 0개가 변경이 되고, 0개가 삭제된다 라는 것을 확인 할 수 있습니다.\n(<code class=\"language-text\">Plan : 1 to add, 0 to change, 0 to destroy</code>)</p>\n<p><img src=\"https://velog.velcdn.com/images/jtret2424/post/0e93249b-9092-4179-929b-4806602863cd/image.png\" alt=\"\"></p>\n<p>사실 <code class=\"language-text\">plan</code>를 하지 않고 바로 <code class=\"language-text\">apply</code>를 진행할 수 있습니다만.. 위 처럼 사람은 실수를 하기에 <code class=\"language-text\">plan</code>은 중요합니다.</p>\n<p>그리고 terraform에서는 어디가 잘못되었는지 확실히 알려주기 때문에 에러로 고생할 일이 적습니다.\n<del>(적다고 했지 없다고 하진 않았따…)</del></p>\n<hr>\n<h3 id=\"1-4-apply적용\" style=\"position:relative;\"><a href=\"#1-4-apply%EC%A0%81%EC%9A%A9\" aria-label=\"1 4 apply적용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1-4. Apply(적용)</h3>\n<p><code class=\"language-text\">apply</code>는 코드를 실제 인프라에 적용하기 위해 사용합니다.</p>\n<p>우리는 이전에 <code class=\"language-text\">plan</code>를 통해 계획을 실행하였으며 실행 과정 중 코드가 있는 디렉토리에 <code class=\"language-text\">terraform</code> 디렉토리가 생성되었습니다.</p>\n<p><img src=\"https://velog.velcdn.com/images/jtret2424/post/42be98d7-b30c-4f23-bed8-5c650b1004e9/image.png\" alt=\"\"></p>\n<p>저장된 <code class=\"language-text\">terraform</code> 디렉토리안에는 CSP API와 통신 가능하도록 만들어진 디렉토리가 있으며 구성된 파일을 가지고 적용하게됩니다.</p>\n<p><img src=\"https://velog.velcdn.com/images/jtret2424/post/9d8f6ca4-715f-4e96-a35a-ef0c92e6b70c/image.png\" alt=\"\"></p>\n<p><code class=\"language-text\">terraform apply</code> 명령어로 적용 시 <code class=\"language-text\">Enter a value : </code>   문구가 발생하며 확인 단계가 필요합니다.\n다시 한번 적용 할껀지 물어봅니다.  <code class=\"language-text\">yes</code>를 입력하게 되면 생성되는 리소스의 <code class=\"language-text\">ID</code> 가 출력되면서 <code class=\"language-text\">Apply complete! Resources: 1 added, 0 changed, 0 destroyed.</code> 적용 완료되었고 몇개의 리소스가 생성, 변경, 삭제 되었는지를 알 수 있습니다.</p>\n<p>이렇게 <code class=\"language-text\">apply</code>를 하게되면 코드가 있던 디렉토리에는 <code class=\"language-text\">terraform.tfstate</code>, <code class=\"language-text\">terraform.tfstate.backup</code> 파일이 생성되었습니다.</p>\n<p><code class=\"language-text\">terrafrom.tfstate</code>파일은 <code class=\"language-text\">apply</code> 직후의 인프라 상태를 저장해둔 파일이며 <code class=\"language-text\">terrafrom.tfstate.backup</code>파일은 <code class=\"language-text\">apply</code> 이전의 상태를 저장해둔 파일입니다.</p>\n<hr>\n<h3 id=\"1-5-destroy\" style=\"position:relative;\"><a href=\"#1-5-destroy\" aria-label=\"1 5 destroy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1-5. Destroy</h3>\n<p><code class=\"language-text\">destroy</code>는 우리가 코드로 생성한 인프라를 삭제~~(뿌셔뿌셔!)~~하기 위해 사용합니다.</p>\n<p><img src=\"https://velog.velcdn.com/images/jtret2424/post/7f4e1f21-5317-4f43-9569-6215e4616a61/image.png\" alt=\"\"></p>\n<p><code class=\"language-text\">terraform destroy</code>를 통해 삭제 할 수 있으며 <code class=\"language-text\">plan</code>과 <code class=\"language-text\">apply</code>처럼 어떤 리소스가 삭제되는지,\n정말로 삭제 할 것인지(?) 물어보게 됩니다.</p>\n<hr>\n<h3 id=\"--end\" style=\"position:relative;\"><a href=\"#--end\" aria-label=\"  end permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- End..</h3>\n<p>이렇게 우리는 코드 작성 단계부터 삭제 단계까지의 Flow를 알아봤다..</p>\n<p>앞으로 코드를 작성하면서 Terraform document을 많이 보게 될텐데 자세히 보면 엄청난 팁이 숨겨져 있다!</p>\n<p>그럼.. 테라폼 고수가 되는 날까지.. <del>아디오스..</del></p>\n<p><img src=\"https://velog.velcdn.com/images/jtret2424/post/c3713d77-cdf8-4542-8a34-1d418dd48990/image.gif\" alt=\"\"></p>\n<p>Terraform languge document : <a href=\"https://www.terraform.io/language\">https://www.terraform.io/language</a></p>\n<hr>\n<p>**자문과 많은 도움을 주신 vincent님께 감사드립니다. ( _ _ )\n**</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#terraform-%EB%8F%99%EC%9E%91%ED%95%98%EB%8A%94-%EA%B3%BC%EC%A0%95\">Terraform 동작하는 과정</a></p>\n<ul>\n<li><a href=\"#--flow\">- Flow</a></li>\n<li><a href=\"#1-1-write%EC%9E%91%EC%84%B1\">1-1. Write(작성)</a></li>\n<li><a href=\"#1-2-init%EC%B4%88%EA%B8%B0%ED%99%94\">1-2. Init(초기화)</a></li>\n<li><a href=\"#1-3-plan%EA%B3%84%ED%9A%8D\">1-3. Plan(계획)</a></li>\n<li><a href=\"#1-4-apply%EC%A0%81%EC%9A%A9\">1-4. Apply(적용)</a></li>\n<li><a href=\"#1-5-destroy\">1-5. Destroy</a></li>\n<li><a href=\"#--end\">- End..</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"Terraform 동작하는 과정 Terraform은 사용자가 작성한 코드를 각 CSP(Cloud Solution Provide)들의 API가 읽을 수 있도록 변환하고 코드에 이상이 없는지 계획를 실행하고 실제 사용자 계정에 인프라를 적용을 한다. 여기서 중요한 점은 API에 접근 할 수 있는지가 중요하다. 간혹 Terraform개발 서버(?)를 Cloud Private 환경에 구성했을 경우 Init과정이 되지 않는다. (Plan과 Apply는 된다) - Flow    코드를 작성**(Write)하고 terraform이 디렉토리를 보고 초기화(Init)하고 계획을 실행(Plan)하고 인프라 적용(Apply)**한다. 1-1. Write(작성) 실제 프로비저닝 하기 위해서는 코드 작성이 필요하고 Terraform의 특징으로는 Yaml과 같이 와  형태라서 작성하기 편하다. 아래 코드만 봐도 와  형태로 이루어져 있어서 한눈에 알아볼수 있다. (사실 module, variable, lo…","frontmatter":{"date":"August 25, 2023","title":"01. Terraform - 동작 과정","categories":"terraform","author":"정욱현","emoji":"😀"},"fields":{"slug":"/terraform/index_02/"}},"next":{"id":"0fd46287-5fa6-5462-bf83-12a8bfd7e2e3","html":"<p><img src=\"https://velog.velcdn.com/images/jtret2424/post/93656a34-0e4e-45a9-ba54-90baee70b736/image.png\" alt=\"\"></p>\n<hr>\n<h2 id=\"01-flask란\" style=\"position:relative;\"><a href=\"#01-flask%EB%9E%80\" aria-label=\"01 flask란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>01. Flask란?</h2>\n<p><img src=\"https://velog.velcdn.com/images/jtret2424/post/f9af1c89-d82c-43d8-9069-0122e99c6a48/image.png\" alt=\"\"></p>\n<p>Flask는 Python를 기반하고 있는 <code class=\"language-text\">Micro Web Framework</code> 다.\n정말 간단한 코드로 쉽게 Web 또는 API Server 구성할 수 있다.</p>\n<hr>\n<h2 id=\"02-또-helloworld-구현하기\" style=\"position:relative;\"><a href=\"#02-%EB%98%90-helloworld-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0\" aria-label=\"02 또 helloworld 구현하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>02. <del>(또)</del> HelloWorld 구현하기</h2>\n<h3 id=\"--flask-라이브러리-설치\" style=\"position:relative;\"><a href=\"#--flask-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EC%84%A4%EC%B9%98\" aria-label=\"  flask 라이브러리 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- Flask 라이브러리 설치</h3>\n<p>우선 <code class=\"language-text\">Flask</code> 라이브러리를 설치해야한다.\n아래 명령어로 설치해보자!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ pip install flask\n$ pip install flask-restx</code></pre></div>\n<h3 id=\"--code-작성하기\" style=\"position:relative;\"><a href=\"#--code-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0\" aria-label=\"  code 작성하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- Code 작성하기</h3>\n<p>원하는 디렉토리 안에 <code class=\"language-text\">app.py</code> 파일을 생성하여 아래 코드를 넣고 저장한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">from flask import Flask\n\napp = Flask (__name__)\n\n@app.route('/')\ndef helloworld():\n\treturn 'Hello World!'\n\nif __name__==\"__main__\":\n\tapp.run()</code></pre></div>\n<h3 id=\"--실행하기\" style=\"position:relative;\"><a href=\"#--%EC%8B%A4%ED%96%89%ED%95%98%EA%B8%B0\" aria-label=\"  실행하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 실행하기</h3>\n<p>만든 <code class=\"language-text\">app.py</code>파일을 python으로 실행하면 아래와 같이 메시지가 발생한다.</p>\n<p><img src=\"https://velog.velcdn.com/images/jtret2424/post/a2261830-9c7b-4065-a3f7-bcc5ed658b65/image.png\" alt=\"\"></p>\n<h3 id=\"--접근하기\" style=\"position:relative;\"><a href=\"#--%EC%A0%91%EA%B7%BC%ED%95%98%EA%B8%B0\" aria-label=\"  접근하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 접근하기</h3>\n<p>테스트 접근은 <code class=\"language-text\">http://127.0.01:5000</code>을 통해 접근하게 되면 <code class=\"language-text\">HelloWorld!</code> 보여지게 된다.</p>\n<p><img src=\"https://velog.velcdn.com/images/jtret2424/post/99bd681f-7e51-44b3-a167-caf03d1a23e1/image.png\" alt=\"\"></p>\n<hr>\n<h2 id=\"03-code-뿌셔보기\" style=\"position:relative;\"><a href=\"#03-code-%EB%BF%8C%EC%85%94%EB%B3%B4%EA%B8%B0\" aria-label=\"03 code 뿌셔보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>03. Code 뿌셔보기</h2>\n<p>우리가 예제코드를 가지고 위에서 <code class=\"language-text\">Hello World!</code>까지 구현해봤다.</p>\n<h3 id=\"--approute\" style=\"position:relative;\"><a href=\"#--approute\" aria-label=\"  approute permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- @app.route(’/‘)</h3>\n<p>우리가 작성하면서 <code class=\"language-text\">@app.route('/')</code> 코드를 넣었는데 이 코드가 <code class=\"language-text\">Route 경로</code>를 뜻하는 것이다.</p>\n<p>접근할때 <code class=\"language-text\">http://127.0.01:5000</code> 주소로 접근했지만 <code class=\"language-text\">http://127.0.01:5000/api</code> 에 접근하려면 코드는 아래과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">from flask import Flask\n\napp = Flask (__name__)\n\n@app.route('/api')\ndef helloworld():\n\treturn 'Hello World!'\n\nif __name__==\"__main__\":\n\tapp.run()</code></pre></div>\n<h3 id=\"--결과\" style=\"position:relative;\"><a href=\"#--%EA%B2%B0%EA%B3%BC\" aria-label=\"  결과 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 결과</h3>\n<p><img src=\"https://velog.velcdn.com/images/jtret2424/post/24e3af2e-c6c4-4879-b809-d1baff0fba43/image.png\" alt=\"\"></p>\n<hr>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#01-flask%EB%9E%80\">01. Flask란?</a></p>\n</li>\n<li>\n<p><a href=\"#02-%EB%98%90-helloworld-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0\">02. <del>(또)</del> HelloWorld 구현하기</a></p>\n<ul>\n<li><a href=\"#--flask-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EC%84%A4%EC%B9%98\">- Flask 라이브러리 설치</a></li>\n<li><a href=\"#--code-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0\">- Code 작성하기</a></li>\n<li><a href=\"#--%EC%8B%A4%ED%96%89%ED%95%98%EA%B8%B0\">- 실행하기</a></li>\n<li><a href=\"#--%EC%A0%91%EA%B7%BC%ED%95%98%EA%B8%B0\">- 접근하기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#03-code-%EB%BF%8C%EC%85%94%EB%B3%B4%EA%B8%B0\">03. Code 뿌셔보기</a></p>\n<ul>\n<li><a href=\"#--approute\">- @app.route(’/‘)</a></li>\n<li><a href=\"#--%EA%B2%B0%EA%B3%BC\">- 결과</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"August 25, 2023","title":"01. Flask를 활용한 Rest API[GET] 구현해보기_01편","categories":"Tech","author":"정욱현","emoji":"😀"},"fields":{"slug":"/tech/restapi_01/"}},"prev":{"id":"90973f5e-fa71-55b5-a2b7-c7659a2465c7","html":"<p><img src=\"https://velog.velcdn.com/images/jtret2424/post/a007f632-fe41-480b-ba28-a12e208d6571/image.png\" alt=\"\"></p>\n<h2 id=\"01-my-ip-api-구현해보기\" style=\"position:relative;\"><a href=\"#01-my-ip-api-%EA%B5%AC%ED%98%84%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"01 my ip api 구현해보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>01. My IP API 구현해보기</h2>\n<blockquote>\n<p><a href=\"https://velog.io/@jtret2424/01.-Rest-API-%EA%B5%AC%ED%98%84%ED%95%B4%EB%B3%B4%EA%B8%B0-bhoxpa39\">01. Flask를 활용한 Rest API[GET] 구현해보기_01편</a></p>\n</blockquote>\n<p>전 편에서 우리는 <code class=\"language-text\">HelloWorld!</code>를 실행해봤다.\n지금까지는 그냥 Web 이랑 뭐가다르지? 싶을 수 있다.</p>\n<h3 id=\"--예제-code\" style=\"position:relative;\"><a href=\"#--%EC%98%88%EC%A0%9C-code\" aria-label=\"  예제 code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 예제 Code</h3>\n<p>HelloWorld는 Root으로 두고 <code class=\"language-text\">/myip</code>를 만들어보자</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">from flask import Flask\nfrom flask import request\nfrom flask import jsonify\n\napp = Flask (__name__)\n\n@app.route('/')\ndef helloworld():\n\treturn 'Hello World!'\n    \n@app.route(\"/myip\")\ndef myip():\n    return jsonify({'ip': request.remote_addr})\n\nif __name__==\"__main__\":\n\tapp.run()</code></pre></div>\n<h3 id=\"--결과\" style=\"position:relative;\"><a href=\"#--%EA%B2%B0%EA%B3%BC\" aria-label=\"  결과 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 결과</h3>\n<p><img src=\"https://velog.velcdn.com/images/jtret2424/post/6b178e8d-e3e1-4c7b-9541-29b84c8e3325/image.png\" alt=\"\"></p>\n<hr>\n<h2 id=\"02-route-옵션\" style=\"position:relative;\"><a href=\"#02-route-%EC%98%B5%EC%85%98\" aria-label=\"02 route 옵션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>02. route 옵션</h2>\n<p><code class=\"language-text\">@app.route('/')</code> 옵션에 절대 경로 <code class=\"language-text\">@app.route('/mpip)</code>처럼 줄 수 있지만, <code class=\"language-text\">myip</code> 외에는 어떻게 처리할까?</p>\n<p>아래 코드처럼 <code class=\"language-text\">&lt;/></code>를 사용하면 설정한 라우팅 경로외에 임의로 넣을 시 메시지를 넣어 리턴 해줄 수 있다!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#@app.route('/&lt;block>')\n#def block(block):\n# return '사용할 수 없는 페이지입니다. 다시 한번확인 바랍니다.'</code></pre></div>\n<h3 id=\"--결과-1\" style=\"position:relative;\"><a href=\"#--%EA%B2%B0%EA%B3%BC-1\" aria-label=\"  결과 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 결과</h3>\n<p><img src=\"https://velog.velcdn.com/images/jtret2424/post/a28464be-a5d3-4c9b-a9e5-6b7a99254ad3/image.png\" alt=\"\"></p>\n<p><code class=\"language-text\">@app.route('api/임의값')</code>를 넣어서 json 형태로 주는 것도 가능하다!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@app.route('/api/&lt;option>') #get echo api\ndef get_echo_call(option):\n    return jsonify({\"option\": option})</code></pre></div>\n<h3 id=\"--결과-2\" style=\"position:relative;\"><a href=\"#--%EA%B2%B0%EA%B3%BC-2\" aria-label=\"  결과 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 결과</h3>\n<p><img src=\"https://velog.velcdn.com/images/jtret2424/post/d2ef9ce2-2ad3-450a-b7c0-ce3f5a0c4d67/image.png\" alt=\"\"></p>\n<hr>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#01-my-ip-api-%EA%B5%AC%ED%98%84%ED%95%B4%EB%B3%B4%EA%B8%B0\">01. My IP API 구현해보기</a></p>\n<ul>\n<li><a href=\"#--%EC%98%88%EC%A0%9C-code\">- 예제 Code</a></li>\n<li><a href=\"#--%EA%B2%B0%EA%B3%BC\">- 결과</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#02-route-%EC%98%B5%EC%85%98\">02. route 옵션</a></p>\n<ul>\n<li><a href=\"#--%EA%B2%B0%EA%B3%BC-1\">- 결과</a></li>\n<li><a href=\"#--%EA%B2%B0%EA%B3%BC-2\">- 결과</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"August 25, 2023","title":"02. Flask를 활용한 Rest API[GET] 구현해보기_02편","categories":"Tech","author":"정욱현","emoji":"😀"},"fields":{"slug":"/tech/restapi_02/"}},"site":{"siteMetadata":{"siteUrl":"https://loafer-wock.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/terraform/index_02/","nextSlug":"/tech/restapi_01/","prevSlug":"/tech/restapi_02/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}