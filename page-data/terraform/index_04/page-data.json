{"componentChunkName":"component---src-templates-blog-template-js","path":"/terraform/index_04/","result":{"data":{"cur":{"id":"4911b009-1a56-50d1-b1c0-2f170d3ecc3b","html":"<h3 id=\"terraform\" style=\"position:relative;\"><a href=\"#terraform\" aria-label=\"terraform permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Terraform</h3>\n<p>앞으로 우리가 Terraform으로 만들 인프라 아키텍처를 참고해서 코드로 구현하는 걸 목표!!!\n<img src=\"https://velog.velcdn.com/images/jtret2424/post/e43d3f89-3358-4bfd-a28e-56407ee99ae0/image.png\" alt=\"\"></p>\n<p>또 한, Terraform AWS Resource Document를 활용하여 resource에 포함된 옵션들을 살펴보자!\n<del>(앞으로 이 Document랑 친해져야합니다..)</del></p>\n<blockquote>\n<p><a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources\">https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources</a></p>\n</blockquote>\n<p><img src=\"https://velog.velcdn.com/images/jtret2424/post/d93e65f3-4de0-4f06-97b8-a8cb6102db4d/image.png\" alt=\"\"></p>\n<hr>\n<h3 id=\"3-0-디렉토리-생성\" style=\"position:relative;\"><a href=\"#3-0-%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC-%EC%83%9D%EC%84%B1\" aria-label=\"3 0 디렉토리 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3-0. 디렉토리 생성</h3>\n<p><code class=\"language-text\">environment</code> 디렉토리 밑에 <code class=\"language-text\">terraform</code> 디렉토리를 만들 후 <code class=\"language-text\">network.tf</code> 파일을 만듭니다!</p>\n<p><img src=\"https://velog.velcdn.com/images/jtret2424/post/7ad967b1-04af-4dca-9d67-4ed05f9dab87/image.png\" alt=\"\"></p>\n<h3 id=\"3-1-providertf-설정\" style=\"position:relative;\"><a href=\"#3-1-providertf-%EC%84%A4%EC%A0%95\" aria-label=\"3 1 providertf 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3-1. Provider.tf 설정</h3>\n<p>리소스를 생성하기 위해서는 IAM Key가 필요하다.\nTerraform에서는 Key를 <code class=\"language-text\">provider.tf</code> 파일에 <code class=\"language-text\">하드코딩</code>하는 방법도 있다.</p>\n<p>위에서 만든 <code class=\"language-text\">terraform</code> 디렉토리 아래 <code class=\"language-text\">provider.tf</code> 파일을 만들어서 Key를 넣어주자</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">provider <span class=\"token string\">\"aws\"</span> <span class=\"token punctuation\">{</span>\n    access_key  <span class=\"token operator\">=</span> <span class=\"token string\">\"[ACCESS KEY]\"</span>\n    secret_key  <span class=\"token operator\">=</span> <span class=\"token string\">\"[SECRET_KEY]\"</span>\n    region      <span class=\"token operator\">=</span> <span class=\"token string\">\"[REGION]\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"3-2-vpc-생성\" style=\"position:relative;\"><a href=\"#3-2-vpc-%EC%83%9D%EC%84%B1\" aria-label=\"3 2 vpc 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3-2. VPC 생성</h3>\n<p>VPC에 생성에 필요한 소스는 아래 Terraform  document 에서 볼 수 있다.</p>\n<blockquote>\n<p><a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/vpc\">https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/vpc</a></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">resource <span class=\"token string\">\"aws_vpc\"</span> <span class=\"token string\">\"vpc\"</span> <span class=\"token punctuation\">{</span>\n    cidr_block <span class=\"token operator\">=</span> <span class=\"token string\">\"192.168.0.0/24\"</span>\n    enable_dns_hostnames <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    tags <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        Name <span class=\"token operator\">=</span> <span class=\"token string\">\"vpc-terraform\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">terraform init</code> 후 <code class=\"language-text\">plan</code>을 실행해보고 내가 만들고 싶은 VPC가 정상적으로 동작하는지 확인해보자!\n문제가 없다면 <code class=\"language-text\">terraform apply</code>를 통해 적용해보자!</p>\n<p><img src=\"https://velog.velcdn.com/images/jtret2424/post/b619a6ef-9f3e-4b1c-a51f-ef851497f77c/image.png\" alt=\"\"></p>\n<p>VPC가 생성된 것을 볼수가 있다!\n이제 Subnet를 생성해보자</p>\n<h3 id=\"3-3-subnet-생성\" style=\"position:relative;\"><a href=\"#3-3-subnet-%EC%83%9D%EC%84%B1\" aria-label=\"3 3 subnet 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3-3. Subnet 생성</h3>\n<p>Subnet은 <code class=\"language-text\">VPC Resource</code>를 만든 <code class=\"language-text\">network.tf</code>안에 아래와 같이 작성해보자</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">### <span class=\"token constant\">VPC</span> ###\nresource <span class=\"token string\">\"aws_vpc\"</span> <span class=\"token string\">\"vpc\"</span> <span class=\"token punctuation\">{</span>\n    cidr_block <span class=\"token operator\">=</span> <span class=\"token string\">\"192.168.0.0/24\"</span>\n    enable_dns_hostnames <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    tags <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        Name <span class=\"token operator\">=</span> <span class=\"token string\">\"vpc-terraform\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n### Subnet ###\nresource <span class=\"token string\">\"aws_subnet\"</span> <span class=\"token string\">\"dmz_subnet_2a\"</span> <span class=\"token punctuation\">{</span>\n\tvpc_id <span class=\"token operator\">=</span> aws_vpc<span class=\"token punctuation\">.</span>vpc<span class=\"token punctuation\">.</span>id\n\tcidr_block <span class=\"token operator\">=</span> <span class=\"token string\">\"192.168.0.0/27\"</span>\n\tavailability_zone <span class=\"token operator\">=</span> <span class=\"token string\">\"ap-northeast-2a\"</span>\n\ttags <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\tName <span class=\"token operator\">=</span> <span class=\"token string\">\"sub-terraform-dmz-2a\"</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nresource <span class=\"token string\">\"aws_subnet\"</span> <span class=\"token string\">\"dmz_subnet_2c\"</span> <span class=\"token punctuation\">{</span>\n\tvpc_id <span class=\"token operator\">=</span> aws_vpc<span class=\"token punctuation\">.</span>vpc<span class=\"token punctuation\">.</span>id\n\tcidr_block <span class=\"token operator\">=</span> <span class=\"token string\">\"192.168.0.32/27\"</span>\n\tavailability_zone <span class=\"token operator\">=</span> <span class=\"token string\">\"ap-northeast-2c\"</span>\n\ttags <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\tName <span class=\"token operator\">=</span> <span class=\"token string\">\"sub-terraform-dmz-2c\"</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nresource <span class=\"token string\">\"aws_subnet\"</span> <span class=\"token string\">\"app_subnet_2a\"</span> <span class=\"token punctuation\">{</span>\n\tvpc_id <span class=\"token operator\">=</span> aws_vpc<span class=\"token punctuation\">.</span>vpc<span class=\"token punctuation\">.</span>id\n\tcidr_block <span class=\"token operator\">=</span> <span class=\"token string\">\"192.168.0.64/26\"</span>\n\tavailability_zone <span class=\"token operator\">=</span> <span class=\"token string\">\"ap-northeast-2a\"</span>\n\ttags <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\tName <span class=\"token operator\">=</span> <span class=\"token string\">\"sub-terraform-app-2a\"</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nresource <span class=\"token string\">\"aws_subnet\"</span> <span class=\"token string\">\"app_subnet_2c\"</span> <span class=\"token punctuation\">{</span>\n\tvpc_id <span class=\"token operator\">=</span> aws_vpc<span class=\"token punctuation\">.</span>vpc<span class=\"token punctuation\">.</span>id\n\tcidr_block <span class=\"token operator\">=</span> <span class=\"token string\">\"192.168.0.128/26\"</span>\n\tavailability_zone <span class=\"token operator\">=</span> <span class=\"token string\">\"ap-northeast-2c\"</span>\n\ttags <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\tName <span class=\"token operator\">=</span> <span class=\"token string\">\"sub-terraform-app-2c\"</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nresource <span class=\"token string\">\"aws_subnet\"</span> <span class=\"token string\">\"db_subnet_2a\"</span> <span class=\"token punctuation\">{</span>\n\tvpc_id <span class=\"token operator\">=</span> aws_vpc<span class=\"token punctuation\">.</span>vpc<span class=\"token punctuation\">.</span>id\n\tcidr_block <span class=\"token operator\">=</span> <span class=\"token string\">\"192.168.0.192/27\"</span>\n\tavailability_zone <span class=\"token operator\">=</span> <span class=\"token string\">\"ap-northeast-2a\"</span>\n\ttags <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\tName <span class=\"token operator\">=</span> <span class=\"token string\">\"sub-terraform-db-2a\"</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nresource <span class=\"token string\">\"aws_subnet\"</span> <span class=\"token string\">\"db_subnet_2c\"</span> <span class=\"token punctuation\">{</span>\n\tvpc_id <span class=\"token operator\">=</span> aws_vpc<span class=\"token punctuation\">.</span>vpc<span class=\"token punctuation\">.</span>id\n\tcidr_block <span class=\"token operator\">=</span> <span class=\"token string\">\"192.168.0.224/27\"</span>\n\tavailability_zone <span class=\"token operator\">=</span> <span class=\"token string\">\"ap-northeast-2c\"</span>\n\ttags <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\tName <span class=\"token operator\">=</span> <span class=\"token string\">\"sub-terraform-app-2c\"</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서 <code class=\"language-text\">aws_subnet</code> 를 생성할땐 <code class=\"language-text\">vpc_id</code>값이 필요한데, VPC를 생성하고 AWS Web Console 화면에서 나온 VPC ID를 하드코딩 할 수 있지만, 매번 만들때마다 Code 수정이 필요한 작업이 필요하다,</p>\n<p><code class=\"language-text\">Terraform.tfstate</code>에 보면 VPC ID가 저장되는데  <code class=\"language-text\">aws_vpc.vpc.id</code>로 VPC ID를 가져 올 수 있다.</p>\n<p>자, 이제 apply를 하면 Subnet 생성된걸 확인 할 수 있다.</p>\n<p><img src=\"https://velog.velcdn.com/images/jtret2424/post/aba9df49-fd88-4956-8e1c-28a4745c22de/image.png\" alt=\"\"></p>\n<hr>\n<p>간단하게 VPC와 Subnet를 만드는걸 해봤지만, 이 글을 읽는 사람이라면\nVPC와 Subnet으로 끝나는 것이 아닌 AWS VPC Network 기본인 항목들을 만들어서 배포해봐야한다. <code class=\"language-text\">IGW</code>, <code class=\"language-text\">NAT</code>, <code class=\"language-text\">RouteTable</code>, <code class=\"language-text\">NACL</code> 등 관리해야하는 리소스들이 있으니 한번 만들어 봤으면 좋겠다!!</p>\n<p>다음 편은 위에 만든 Code를 Module화 하는 것이다!</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#terraform\">Terraform</a></li>\n<li><a href=\"#3-0-%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC-%EC%83%9D%EC%84%B1\">3-0. 디렉토리 생성</a></li>\n<li><a href=\"#3-1-providertf-%EC%84%A4%EC%A0%95\">3-1. Provider.tf 설정</a></li>\n<li><a href=\"#3-2-vpc-%EC%83%9D%EC%84%B1\">3-2. VPC 생성</a></li>\n<li><a href=\"#3-3-subnet-%EC%83%9D%EC%84%B1\">3-3. Subnet 생성</a></li>\n</ul>\n</div>","excerpt":"Terraform 앞으로 우리가 Terraform으로 만들 인프라 아키텍처를 참고해서 코드로 구현하는 걸 목표!!!\n 또 한, Terraform AWS Resource Document를 활용하여 resource에 포함된 옵션들을 살펴보자!\n(앞으로 이 Document랑 친해져야합니다..) https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources  3-0. 디렉토리 생성  디렉토리 밑에  디렉토리를 만들 후  파일을 만듭니다!  3-1. Provider.tf 설정 리소스를 생성하기 위해서는 IAM Key가 필요하다.\nTerraform에서는 Key를  파일에 하는 방법도 있다. 위에서 만든  디렉토리 아래  파일을 만들어서 Key를 넣어주자 3-2. VPC 생성 VPC에 생성에 필요한 소스는 아래 Terraform  document 에서 볼 수 있다. https://registry.terraform.io/p…","frontmatter":{"date":"August 25, 2023","title":"03. Terraform - AWS VPC, Subnet 생성","categories":"terraform","author":"정욱현","emoji":"😀"},"fields":{"slug":"/terraform/index_04/"}},"next":{"id":"90973f5e-fa71-55b5-a2b7-c7659a2465c7","html":"<p><img src=\"https://velog.velcdn.com/images/jtret2424/post/a007f632-fe41-480b-ba28-a12e208d6571/image.png\" alt=\"\"></p>\n<h2 id=\"01-my-ip-api-구현해보기\" style=\"position:relative;\"><a href=\"#01-my-ip-api-%EA%B5%AC%ED%98%84%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"01 my ip api 구현해보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>01. My IP API 구현해보기</h2>\n<blockquote>\n<p><a href=\"https://velog.io/@jtret2424/01.-Rest-API-%EA%B5%AC%ED%98%84%ED%95%B4%EB%B3%B4%EA%B8%B0-bhoxpa39\">01. Flask를 활용한 Rest API[GET] 구현해보기_01편</a></p>\n</blockquote>\n<p>전 편에서 우리는 <code class=\"language-text\">HelloWorld!</code>를 실행해봤다.\n지금까지는 그냥 Web 이랑 뭐가다르지? 싶을 수 있다.</p>\n<h3 id=\"--예제-code\" style=\"position:relative;\"><a href=\"#--%EC%98%88%EC%A0%9C-code\" aria-label=\"  예제 code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 예제 Code</h3>\n<p>HelloWorld는 Root으로 두고 <code class=\"language-text\">/myip</code>를 만들어보자</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask\n<span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> request\n<span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> jsonify\n\napp <span class=\"token operator\">=</span> Flask <span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">helloworld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token string\">'Hello World!'</span>\n    \n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/myip\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">myip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> jsonify<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'ip'</span><span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">.</span>remote_addr<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__<span class=\"token operator\">==</span><span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n\tapp<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"--결과\" style=\"position:relative;\"><a href=\"#--%EA%B2%B0%EA%B3%BC\" aria-label=\"  결과 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 결과</h3>\n<p><img src=\"https://velog.velcdn.com/images/jtret2424/post/6b178e8d-e3e1-4c7b-9541-29b84c8e3325/image.png\" alt=\"\"></p>\n<hr>\n<h2 id=\"02-route-옵션\" style=\"position:relative;\"><a href=\"#02-route-%EC%98%B5%EC%85%98\" aria-label=\"02 route 옵션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>02. route 옵션</h2>\n<p><code class=\"language-text\">@app.route('/')</code> 옵션에 절대 경로 <code class=\"language-text\">@app.route('/mpip)</code>처럼 줄 수 있지만, <code class=\"language-text\">myip</code> 외에는 어떻게 처리할까?</p>\n<p>아래 코드처럼 <code class=\"language-text\">&lt;/></code>를 사용하면 설정한 라우팅 경로외에 임의로 넣을 시 메시지를 넣어 리턴 해줄 수 있다!</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/&lt;block>'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">block</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token string\">'사용할 수 없는 페이지입니다. 다시 한번확인 바랍니다.'</span></code></pre></div>\n<h3 id=\"--결과-1\" style=\"position:relative;\"><a href=\"#--%EA%B2%B0%EA%B3%BC-1\" aria-label=\"  결과 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 결과</h3>\n<p><img src=\"https://velog.velcdn.com/images/jtret2424/post/a28464be-a5d3-4c9b-a9e5-6b7a99254ad3/image.png\" alt=\"\"></p>\n<p><code class=\"language-text\">@app.route('api/임의값')</code>를 넣어서 json 형태로 주는 것도 가능하다!</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/&lt;option>'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#get echo api</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_echo_call</span><span class=\"token punctuation\">(</span>option<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> jsonify<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"option\"</span><span class=\"token punctuation\">:</span> option<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"--결과-2\" style=\"position:relative;\"><a href=\"#--%EA%B2%B0%EA%B3%BC-2\" aria-label=\"  결과 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 결과</h3>\n<p><img src=\"https://velog.velcdn.com/images/jtret2424/post/d2ef9ce2-2ad3-450a-b7c0-ce3f5a0c4d67/image.png\" alt=\"\"></p>\n<hr>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#01-my-ip-api-%EA%B5%AC%ED%98%84%ED%95%B4%EB%B3%B4%EA%B8%B0\">01. My IP API 구현해보기</a></p>\n<ul>\n<li><a href=\"#--%EC%98%88%EC%A0%9C-code\">- 예제 Code</a></li>\n<li><a href=\"#--%EA%B2%B0%EA%B3%BC\">- 결과</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#02-route-%EC%98%B5%EC%85%98\">02. route 옵션</a></p>\n<ul>\n<li><a href=\"#--%EA%B2%B0%EA%B3%BC-1\">- 결과</a></li>\n<li><a href=\"#--%EA%B2%B0%EA%B3%BC-2\">- 결과</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"August 25, 2023","title":"02. Flask를 활용한 Rest API[GET] 구현해보기_02편","categories":"Tech","author":"정욱현","emoji":"😀"},"fields":{"slug":"/tech/restapi_02/"}},"prev":{"id":"7410b51b-0558-5a5a-9ce9-22c363995ee2","html":"<p><img src=\"https://velog.velcdn.com/images/jtret2424/post/99667634-0642-4cd2-9f44-9019bb0b7a3e/image.png\" alt=\"\"></p>\n<hr>\n<h2 id=\"1-steampipe\" style=\"position:relative;\"><a href=\"#1-steampipe\" aria-label=\"1 steampipe permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Steampipe?</h2>\n<p>Steampipe는 클라우드 리소스들을 <code class=\"language-text\">DB Query</code> 형태로 조회 할 수 있고 Steampipe도 마찬가지로 여러 CSP 서비스들(AWS,GCP,Azure 등)에서도 사용이 가능하다.</p>\n<p>Steampipe는 <code class=\"language-text\">gRPC</code> 형태로 메시지를 각 <code class=\"language-text\">Plugin</code>을 이용해 클라우드와 통신을 하기에 속도가 빠른 장점이 있다!</p>\n<p><img src=\"https://velog.velcdn.com/images/jtret2424/post/6ec34275-f57a-4276-b73b-0f8a356a43a0/image.png\" alt=\"\"></p>\n<hr>\n<h2 id=\"2-일단-사용해보자\" style=\"position:relative;\"><a href=\"#2-%EC%9D%BC%EB%8B%A8-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EC%9E%90\" aria-label=\"2 일단 사용해보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 일단 사용해보자!</h2>\n<p>직접 Query문를 실행해보고 경험하지 않으면 자세히 모르니 일단 설치하고 실행해보자!!</p>\n<h3 id=\"2-1-steampipe-설치\" style=\"position:relative;\"><a href=\"#2-1-steampipe-%EC%84%A4%EC%B9%98\" aria-label=\"2 1 steampipe 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-1. Steampipe 설치</h3>\n<blockquote>\n<p>Steampipe Install Docs : <a href=\"https://steampipe.io/downloads\">https://steampipe.io/downloads</a></p>\n</blockquote>\n<h4 id=\"2-2-linux-os-환경의-install\" style=\"position:relative;\"><a href=\"#2-2-linux-os-%ED%99%98%EA%B2%BD%EC%9D%98-install\" aria-label=\"2 2 linux os 환경의 install permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-2. Linux OS 환경의 Install</h4>\n<ol>\n<li>Steampipe Install</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sudo</span> /bin/sh <span class=\"token parameter variable\">-c</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-fsSL</span> https://raw.githubusercontent.com/turbot/steampipe/main/install.sh<span class=\"token variable\">)</span></span>\"</span>\n</code></pre></div>\n<ol start=\"2\">\n<li>Steampipe AWS Plugin Install</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ steampip plugin <span class=\"token function\">install</span> aws</code></pre></div>\n<hr>\n<h3 id=\"2-3-aws-configure-설정\" style=\"position:relative;\"><a href=\"#2-3-aws-configure-%EC%84%A4%EC%A0%95\" aria-label=\"2 3 aws configure 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-3. AWS Configure 설정</h3>\n<p><code class=\"language-text\">steampipe</code>사용하기 전에 <code class=\"language-text\">aws configure</code> 설정을 하자</p>\n<blockquote>\n<p>사용할 IAM Key는 ReadOnlyAccess Policy를 가지고 있는 Key를 사용하자!</p>\n</blockquote>\n<hr>\n<h3 id=\"2-4-query-해보기\" style=\"position:relative;\"><a href=\"#2-4-query-%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"2 4 query 해보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-4. Query 해보기</h3>\n<p>생성한 <code class=\"language-text\">VPC Name Tag</code>를 가져와보자!</p>\n<p>먼저 <code class=\"language-text\">steampipe query</code> 에 접속을 하고 쓸수 있는 <code class=\"language-text\">tables</code> 목록을 보자</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ steampipe query\n\n<span class=\"token operator\">></span> .tables\n<span class=\"token operator\">==</span><span class=\"token operator\">></span> aws</code></pre></div>\n<p><img src=\"https://velog.velcdn.com/images/jtret2424/post/fa103279-a925-40c5-81f5-9cd6a052502f/image.png\" alt=\"\">\n<code class=\"language-text\">steampipe query</code>에서 <code class=\"language-text\">.tables</code> 명령어를 치면 <code class=\"language-text\">AWS Table</code>를 확인 할 수 있다.\n이 <code class=\"language-text\">Table</code>를 활용해서 VPC 목록을 조회해보자!</p>\n<h3 id=\"2-5-inspect-tables-name\" style=\"position:relative;\"><a href=\"#2-5-inspect-tables-name\" aria-label=\"2 5 inspect tables name permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-5. .inspect [Tables Name]</h3>\n<p>아래 명령을 사용하면 <code class=\"language-text\">aws_vpc</code>에서 사용가능한 <code class=\"language-text\">column</code> 확인이 가능하다!</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">.inspect aws_vpc\t\t\t\t</code></pre></div>\n<p><img src=\"https://velog.velcdn.com/images/jtret2424/post/a653822d-cb7a-4aec-aba6-1c3f54f43f8f/image.png\" alt=\"\"></p>\n<blockquote>\n<p><code class=\"language-text\">column</code>에서 <code class=\"language-text\">type</code>별로 표현형태가 다르다.</p>\n</blockquote>\n<p>예로, account_id는 text 형태이지만, tags는 json 형태다.</p>\n<hr>\n<h3 id=\"2-6-select-column-from-table\" style=\"position:relative;\"><a href=\"#2-6-select-column-from-table\" aria-label=\"2 6 select column from table permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-6. select [column] from [table]</h3>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span>\n\ttags\n<span class=\"token keyword\">from</span>\n\taws_vpc</code></pre></div>\n<p><img src=\"https://velog.velcdn.com/images/jtret2424/post/7e66961f-ce59-4125-8417-45827b85c972/image.png\" alt=\"\"></p>\n<h3 id=\"2-6-instance\" style=\"position:relative;\"><a href=\"#2-6-instance\" aria-label=\"2 6 instance permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-6. Instance</h3>\n<p>생성된 EC2의 <code class=\"language-text\">ID</code>, <code class=\"language-text\">Type</code>, <code class=\"language-text\">IP</code>, <code class=\"language-text\">Tags</code>를 가져와보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token operator\">></span> <span class=\"token keyword\">select</span> \n\tinstance_id<span class=\"token punctuation\">,</span>\n\tinstance_type<span class=\"token punctuation\">,</span>\n\tprivate_ip_address<span class=\"token punctuation\">,</span>tags \n<span class=\"token keyword\">from</span> \n\taws_ec2_instance</code></pre></div>\n<p><img src=\"https://velog.velcdn.com/images/jtret2424/post/e542d3c4-47f5-4b63-b82d-cbc15c0aa886/image.png\" alt=\"\"></p>\n<hr>\n<h2 id=\"3-특정-type-값만-가져오기\" style=\"position:relative;\"><a href=\"#3-%ED%8A%B9%EC%A0%95-type-%EA%B0%92%EB%A7%8C-%EA%B0%80%EC%A0%B8%EC%98%A4%EA%B8%B0\" aria-label=\"3 특정 type 값만 가져오기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 특정 Type 값만 가져오기</h2>\n<p>EC2의 <code class=\"language-text\">Type</code>값을 가지고 있는 목록 불러와보자!</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token operator\">></span> <span class=\"token keyword\">select</span> \n\tinstance_id<span class=\"token punctuation\">,</span>\n\tinstance_type<span class=\"token punctuation\">,</span>\n\tprivate_ip_address<span class=\"token punctuation\">,</span>\n\ttags \n<span class=\"token keyword\">from</span> \n\taws_ec2_instance \n<span class=\"token keyword\">where</span> \n\tinstance_type<span class=\"token operator\">=</span><span class=\"token string\">'c5.xlarge'</span></code></pre></div>\n<p><img src=\"https://velog.velcdn.com/images/jtret2424/post/fbfa2487-1181-4864-9dee-7c60c41c2bc3/image.png\" alt=\"\"></p>\n<hr>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#1-steampipe\">1. Steampipe?</a></p>\n</li>\n<li>\n<p><a href=\"#2-%EC%9D%BC%EB%8B%A8-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EC%9E%90\">2. 일단 사용해보자!</a></p>\n<ul>\n<li>\n<p><a href=\"#2-1-steampipe-%EC%84%A4%EC%B9%98\">2-1. Steampipe 설치</a></p>\n<ul>\n<li><a href=\"#2-2-linux-os-%ED%99%98%EA%B2%BD%EC%9D%98-install\">2-2. Linux OS 환경의 Install</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#2-3-aws-configure-%EC%84%A4%EC%A0%95\">2-3. AWS Configure 설정</a></p>\n</li>\n<li>\n<p><a href=\"#2-4-query-%ED%95%B4%EB%B3%B4%EA%B8%B0\">2-4. Query 해보기</a></p>\n</li>\n<li>\n<p><a href=\"#2-5-inspect-tables-name\">2-5. .inspect [Tables Name]</a></p>\n</li>\n<li>\n<p><a href=\"#2-6-select-column-from-table\">2-6. select [column] from [table]</a></p>\n</li>\n<li>\n<p><a href=\"#2-6-instance\">2-6. Instance</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#3-%ED%8A%B9%EC%A0%95-type-%EA%B0%92%EB%A7%8C-%EA%B0%80%EC%A0%B8%EC%98%A4%EA%B8%B0\">3. 특정 Type 값만 가져오기</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"August 26, 2023","title":"AWS Resource Management \"Steampipe\" Tool 활용하기","categories":"Tech","author":"정욱현","emoji":"😀"},"fields":{"slug":"/tech/steampipe/"}},"site":{"siteMetadata":{"siteUrl":"https://loafer-wock.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/terraform/index_04/","nextSlug":"/tech/restapi_02/","prevSlug":"/tech/steampipe/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}